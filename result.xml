<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="3" hostname="Ajju" name="pytest" skipped="0" tests="6" time="0.047" timestamp="2023-12-16T10:32:29.649102"><testcase classname="Practise.Pytest.test_sample1" name="test_method1" time="0.001" /><testcase classname="Practise.Pytest.test_sample1" name="test_method2" time="0.001"><failure message="assert 2 != 2">add = 2

    @pytest.mark.marl
    def test_method2(add):
        a=2
        print("this is testmethod2")
&gt;       assert (a!=add)
E       assert 2 != 2

Practise\Pytest\test_sample1.py:13: AssertionError</failure></testcase><testcase classname="Practise.Pytest.test_sample1" name="test_multiplication_11[1-1]" time="0.001"><failure message="assert (11 * 1) == 1">num = 1, output = 1

    @pytest.mark.parametrize("num, output",[(1,1),(2,22),(3,35),(4,44)])
    def test_multiplication_11(num, output):
&gt;      assert 11*num == output
E      assert (11 * 1) == 1

Practise\Pytest\test_sample1.py:17: AssertionError</failure></testcase><testcase classname="Practise.Pytest.test_sample1" name="test_multiplication_11[2-22]" time="0.001" /><testcase classname="Practise.Pytest.test_sample1" name="test_multiplication_11[3-35]" time="0.001"><failure message="assert (11 * 3) == 35">num = 3, output = 35

    @pytest.mark.parametrize("num, output",[(1,1),(2,22),(3,35),(4,44)])
    def test_multiplication_11(num, output):
&gt;      assert 11*num == output
E      assert (11 * 3) == 35

Practise\Pytest\test_sample1.py:17: AssertionError</failure></testcase><testcase classname="Practise.Pytest.test_sample1" name="test_multiplication_11[4-44]" time="0.001" /></testsuite></testsuites>